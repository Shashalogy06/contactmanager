{"version":3,"sources":["context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/Header.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContact.js","components/pages/About.js","components/pages/Notfound.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","res","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onShowClick","e","onDeleteClick","a","async","delete","name","email","phone","className","onClick","style","cursor","float","color","bind","to","marginRight","propType","PropTypes","object","isRequired","Contacts","key","Header","branding","href","defaultProps","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","AddContact","errors","onSubmit","preventDefault","newContact","post","history","push","target","EditContact","match","params","updContact","put","About","App","exact","path","component","Notfound","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12af5796.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Context= React.createContext();\r\n\r\nconst reducer=(state, action)=>{\r\n    switch(action.type){\r\n        case 'DELETE_CONTACT':\r\n            return{\r\n                ...state,\r\n                contacts:state.contacts.filter(contact=> contact.id!==action.payload)\r\n            }\r\n        case 'ADD_CONTACT':\r\n            return{\r\n                ...state,\r\n                contacts:[action.payload, ...state.contacts]//this will ass actions.payload to state.contacts\r\n            }\r\n        case 'UPDATE_CONTACT':\r\n            return{\r\n                ...state,\r\n                contacts:state.contacts.map(contact=>\r\n                    contact.id===action.payload.id?(contact=action.payload):contact)\r\n            }\r\n        default:\r\n            return state;    \r\n    }\r\n}\r\n\r\n\r\nexport class Provider extends Component{\r\n    state={\r\n        contacts:[],\r\n        dispatch: action =>{\r\n            this.setState(state=> reducer(state,action))\r\n        }\r\n    }\r\n\r\n    async componentDidMount () {\r\n        const res=await axios.get\r\n        ('https://jsonplaceholder.typicode.com/users');\r\n        this.setState({contacts:res.data})\r\n    }\r\n\r\n    render(){\r\n    //whatever  we put in this value is what we will be getting in consumer\r\n        return (\r\n            <Context.Provider value={this.state}>   \r\n                {this.props.children}\r\n            </Context.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport  const Consumer= Context.Consumer;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Consumer} from '../../context';\r\nimport axios from 'axios';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nclass Contact extends Component{\r\n    \r\n\r\n    state={\r\n            showContactInfo:false\r\n    }\r\n\r\n\r\nonShowClick=e=>{\r\nthis.setState({showContactInfo:!this.state.showContactInfo});\r\n}\r\n\r\nonDeleteClick=async (id,dispatch)=>{\r\n    try{\r\n        await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`)\r\n\r\n        dispatch({type:'DELETE_CONTACT', payload:id})\r\n    }catch(e){\r\n        \r\n        dispatch({type:'DELETE_CONTACT', payload:id})\r\n    }\r\n    \r\n}\r\n\r\n    render(){\r\n\r\n\r\n        const {id,name,email,phone}=this.props.contact;\r\n        const {showContactInfo}=this.state;\r\n        return(\r\n\r\n            <Consumer>\r\n                {value=>{\r\n                    const {dispatch}=value;\r\n                    return (\r\n                        <div className=\"card card-body mb-3\">\r\n                <h4>{name} <i onClick={()=> \r\n                    this.setState({showContactInfo:!this.state.showContactInfo})}\r\n                     className=\"fas fa-sort-down\"  \r\n                     style={{cursor:'pointer'}}/>\r\n                     <i className=\"fas fa-times\"\r\n                     style={{cursor:'pointer',float:'right', color:'red'}}\r\n                     onClick={this.onDeleteClick.bind(this,id,dispatch)}/>\r\n                         <Link to={`contact/edit/${id}`}>\r\n                             <i\r\n                             className=\"fas fa-pencil-alt\"\r\n                             style={{\r\n                                 cursor:'pointer',\r\n                                 float:'right',\r\n                                 color:'black',\r\n                                 marginRight:'1rem'\r\n                             }}/>\r\n                         </Link>\r\n                         </h4>\r\n                {showContactInfo? (\r\n                    <ul className=\"list-group\">\r\n                    <li className=\"list-group-item\"> Email:{email}</li>\r\n                    <li className=\"list-group-item\"> Phone:{phone}</li>\r\n                </ul>\r\n                ):null}\r\n            </div>\r\n                    )\r\n                }}\r\n\r\n            </Consumer>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nContact.propType={\r\n    contacts:PropTypes.object.isRequired\r\n}\r\nexport default Contact;","import React, {Component, Fragment} from 'react';\r\nimport Contact from './Contact';\r\nimport {Consumer} from '../../context';\r\n\r\n\r\nclass Contacts extends Component{\r\n\r\n    render(){\r\n\r\n        return (\r\n            <Consumer>\r\n                {value=>{\r\n                    const {contacts}=value\r\n                    return(\r\n                        <Fragment>\r\n                            <h1 className=\"display-4 mb-2\">\r\n                                <span className=\"text-danger\">Contact</span>\r\n                                List\r\n                            </h1>\r\n                        {contacts.map(contact => (\r\n                        <Contact\r\n                        key={contact.id}\r\n                        contact={contact}\r\n                        />\r\n                        ))}\r\n                        </Fragment>\r\n                        )\r\n                    }}\r\n            </Consumer>\r\n        )\r\n\r\n        \r\n    }\r\n}\r\n\r\nexport default Contacts;","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst Header=props=>{\r\n    const {branding}=props;\r\n    return (\r\n        <nav className=\"navbar navbar-expand-sm\r\n        navbar-dark bg-danger mb-3 py-0\">\r\n            <div className=\"container\">\r\n                <a href=\"/\" className=\"navbar-brand\">\r\n                    {branding}\r\n                </a>\r\n                <div>\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/\" className=\"nav-link\">\r\n                                <i className=\"fas fa-home\"/>\r\n                                Home\r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/contact/add\" className=\"nav-link\">\r\n                            <i className=\"fas fa-plus\"/>\r\n                                Add\r\n                            </Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/about\" className=\"nav-link\">\r\n                            <i className=\"fas fa-question\"/>\r\n                                About\r\n                            </Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nHeader.defaultProps={\r\n    branding:\"My App\"\r\n}\r\n\r\nHeader.propTypes={\r\n    branding:PropTypes.string.isRequired\r\n}\r\nexport default Header;","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'//for \r\n\r\nconst TextInputGroup= ({\r\n    label,\r\n    name,\r\n    value,\r\n    placeholder,\r\n    type,\r\n    onChange,\r\n    error\r\n})=> {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label htmlFor={name}>{label}</label>\r\n            <input type={type}\r\n            name={name}\r\n            className={classnames('form-control form-control-lg',{\r\n                'is-invalid':error\r\n            })}\r\n            placeholder={placeholder}\r\n            value={value}\r\n            onChange={onChange}\r\n            />\r\n            {error && <div className=\"invalid-feedback\">{error}</div>}\r\n             \r\n        </div>\r\n    )\r\n}\r\n\r\nTextInputGroup.propTypes={\r\n    label:PropTypes.string.isRequired,\r\n    name:PropTypes.string.isRequired,\r\n    placeholder:PropTypes.string.isRequired,\r\n    value:PropTypes.string.isRequired,\r\n    type:PropTypes.string.isRequired,\r\n    onChange:PropTypes.func.isRequired,\r\n    error:PropTypes.string.isRequired\r\n}\r\n\r\nTextInputGroup.defaultProps={\r\n    type:\"text\"\r\n}\r\n\r\nexport default TextInputGroup;\r\n","import React, { Component } from 'react'\r\nimport {Consumer} from '../../context'\r\nimport TextInputGroup from '../layout/TextInputGroup'\r\nimport axios from 'axios'\r\n\r\n class AddContact extends Component {\r\n\r\n    state={\r\n        name:'',\r\n        email:'',\r\n        phone:'',\r\n        errors:{}//to not submit empty form data into the list\r\n    }\r\n\r\n    \r\n\r\n    onSubmit=async (dispatch,e)=>{\r\n        e.preventDefault();\r\n\r\n\r\n        const{name,email,phone}=this.state; \r\n\r\n        //check for errors\r\n        if(name===''){\r\n            this.setState({\r\n                errors:{name:'Name is required'}\r\n            })\r\n            return;\r\n        }\r\n        if(email===''){\r\n            this.setState({\r\n                errors:{email:'Email is required'}\r\n            })\r\n            return;\r\n        }\r\n        if(phone===''){\r\n            this.setState({\r\n                errors:{phone:'Phone is required'}\r\n            })\r\n            return;\r\n        }\r\n\r\n        \r\n        const newContact={\r\n            name,\r\n            email,\r\n            phone\r\n        }\r\n\r\n        const res=await axios.post\r\n        ('https://jsonplaceholder.typicode.com/users',newContact)\r\n\r\n        dispatch({type:\"ADD_CONTACT\",payload:res.data})\r\n\r\n        this.setState({\r\n            name:'',\r\n            email:'',\r\n            phone:'',\r\n            errors:''\r\n        })\r\n\r\n        this.props.history.push('/');//redirects to home page\r\n    }\r\n\r\n    onChange=e=>this.setState({[e.target.name]:e.target.value});\r\n    render() {\r\n        const {name,email,phone,errors}=this.state;\r\n\r\n\r\n        return (\r\n            <Consumer>\r\n                {value=>{\r\n                    const {dispatch}=value;\r\n                    return (\r\n                        <div className=\" card mb-3\">\r\n                        <div className=\"card-header\">Add Contact</div>\r\n                        <div className=\"card-body\">\r\n                            <form onSubmit={this.onSubmit.bind(this,dispatch)}>\r\n                                \r\n                                <TextInputGroup\r\n                                label=\"Name\"\r\n                                name=\"name\"\r\n                                placeholder=\"Enter name..\"\r\n                                value={name}\r\n                                onChange={this.onChange}\r\n                                error={errors.name}\r\n                                />\r\n                                \r\n                                <TextInputGroup\r\n                                label=\"Email\"\r\n                                name=\"email\"\r\n                                type=\"email\"\r\n                                placeholder=\"Enter email..\"\r\n                                value={email}\r\n                                onChange={this.onChange}\r\n                                error={errors.email}\r\n                                />\r\n                                \r\n                                <TextInputGroup\r\n                                label=\"phone\"\r\n                                name=\"phone\"\r\n                                placeholder=\"Enter Phone..\"\r\n                                value={phone}\r\n                                onChange={this.onChange}\r\n                                error={errors.phone}\r\n                                />\r\n                                <input\r\n                                type=\"submit\"\r\n                                value=\"Add Contact\"\r\n                                className=\"btn btn-light btn-black\"\r\n                                />\r\n        \r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n        \r\n    }\r\n}\r\nexport default AddContact","import React, { Component } from 'react'\r\nimport {Consumer} from '../../context'\r\nimport TextInputGroup from '../layout/TextInputGroup'\r\nimport axios from 'axios'\r\n\r\n class EditContact extends Component {\r\n\r\n    state={\r\n        name:'',\r\n        email:'',\r\n        phone:'',\r\n        errors:{}//to not submit empty form data into the list\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const {id}=this.props.match.params\r\n        const res=await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`)\r\n        const contact=res.data;\r\n        this.setState({\r\n            name:contact.name,\r\n            email:contact.email,\r\n            phone:contact.phone\r\n        });\r\n    }\r\n\r\n    onSubmit=async (dispatch,e)=>{\r\n        e.preventDefault();\r\n\r\n\r\n        const{name,email,phone}=this.state; \r\n\r\n        //check for errors\r\n        if(name===''){\r\n            this.setState({\r\n                errors:{name:'Name is required'}\r\n            })\r\n            return;\r\n        }\r\n        if(email===''){\r\n            this.setState({\r\n                errors:{email:'Email is required'}\r\n            })\r\n            return;\r\n        }\r\n        if(phone===''){\r\n            this.setState({\r\n                errors:{phone:'Phone is required'}\r\n            })\r\n            return;\r\n        }\r\n\r\n        const {id}=this.props.match.params;\r\n\r\n        const updContact={\r\n            name,\r\n            email,\r\n            phone\r\n        }\r\n\r\n        const res= await axios.put(`https://jsonplaceholder.typicode.com/users/${id}`\r\n        ,updContact)\r\n\r\n        dispatch({type:'UPDATE_CONTACT', payload:res.data});\r\n\r\n        this.setState({\r\n            name:'',\r\n            email:'',\r\n            phone:'',\r\n            errors:{}\r\n        })\r\n\r\n        this.props.history.push('/');//redirects to home page\r\n    }\r\n\r\n    onChange=e=>this.setState({[e.target.name]:e.target.value});\r\n    render() {\r\n        const {name,email,phone,errors}=this.state;\r\n\r\n\r\n        return (\r\n            <Consumer>\r\n                {value=>{\r\n                    const {dispatch}=value;\r\n                    return (\r\n                        <div className=\" card mb-3\">\r\n                        <div className=\"card-header\">Edit Contact</div>\r\n                        <div className=\"card-body\">\r\n                            <form onSubmit={this.onSubmit.bind(this,dispatch)}>\r\n                                \r\n                                <TextInputGroup\r\n                                label=\"Name\"\r\n                                name=\"name\"\r\n                                placeholder=\"Enter name..\"\r\n                                value={name}\r\n                                onChange={this.onChange}\r\n                                error={errors.name}\r\n                                />\r\n                                \r\n                                <TextInputGroup\r\n                                label=\"Email\"\r\n                                name=\"email\"\r\n                                type=\"email\"\r\n                                placeholder=\"Enter email..\"\r\n                                value={email}\r\n                                onChange={this.onChange}\r\n                                error={errors.email}\r\n                                />\r\n                                \r\n                                <TextInputGroup\r\n                                label=\"phone\"\r\n                                name=\"phone\"\r\n                                placeholder=\"Enter Phone..\"\r\n                                value={phone}\r\n                                onChange={this.onChange}\r\n                                error={errors.phone}\r\n                                />\r\n                                <input\r\n                                type=\"submit\"\r\n                                value=\"Update Contact\"\r\n                                className=\"btn btn-light btn-black\"\r\n                                />\r\n        \r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n        \r\n    }\r\n}\r\nexport default EditContact","import React from 'react'\r\n\r\nconst About=()=>{\r\n  return(\r\n      <div>\r\n          <h1 className=\"display-4\">About Contact Manager</h1>\r\n          <p className=\"lead\">Simple app to manage contacts</p>\r\n          <p className=\"text-secondary\">Version 1.0.0</p>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default About;","import React from 'react'\r\n\r\nexport default ()=>{\r\n    return (\r\n        <div>\r\n            <h1 className=\"diaplay-4\">\r\n                <span className=\"text-danger\">404</span> Page Not Found</h1>\r\n            <p className=\"lead\">Sorry, that page doesn't exist</p>\r\n        </div>\r\n    )\r\n}","import React, {Component} from 'react';\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom'\nimport Contacts from './components/contacts/Contacts'\nimport Header from './components/layout/Header'\nimport AddContact from './components/contacts/AddContact'\nimport EditContact from './components/contacts/EditContact'\n\nimport About from './components/pages/About'\nimport Notfound from './components/pages/Notfound'\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport {Provider} from './context';\n\nclass App extends Component {\n  render(){\n    return (\n      <Provider>\n        <Router>\n        <div className=\"App\">\n        <Header branding=\"Contact Manager\" />\n          <div className=\"container\">\n            <Switch>\n            <Route exact path=\"/\" component={Contacts}/>\n            <Route exact path=\"/about\" component={About}/>\n            <Route exact path=\"/contact/add\" component={AddContact}/>\n            <Route exact path=\"/contact/edit/:id\" component={EditContact}/>\n            <Route component={Notfound}/>\n            </Switch>\n          </div>\n       </div>\n        </Router> \n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}